{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","utils/OrderControl.tsx","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","PeopleFilters","setSearchParams","getCenturyParams","century","currentCenturies","getAll","includes","filter","item","String","cn","get","sex","type","placeholder","onChange","event","target","map","centuries","href","onClick","Loader","PersonLink","person","slug","name","OrderControl","sort","currentSort","currentOrder","newSort","newOrder","order","handleOrder","PeopleTable","people","useParams","getPersonByName","find","motherName","fatherName","born","died","mother","undefined","father","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","peopleMessage","setPeopleMessage","error","setError","useEffect","getPeople","length","catch","finally","displayedPeople","filteredPeople","gender","query","Math","ceil","Number","toLowerCase","toLocaleLowerCase","a","b","localeCompare","reverse","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.54757a05.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = ({ isActive }: { isActive:\nboolean }) => classNames('navbar-item', {\n  'has-background-grey-lighter':\n  isActive,\n});\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">\n      Home Page\n    </h1>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import cn from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const centuries = [16, 17, 18, 19, 20];\n\n  const getCenturyParams = (century: string) => {\n    const currentCenturies = searchParams.getAll('centuries');\n\n    return currentCenturies.includes(century)\n      ? currentCenturies.filter(item => item !== century)\n      : [String(century), ...searchParams.getAll('centuries')];\n  };\n\n  const handleQuery: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const params = new URLSearchParams(searchParams);\n\n    params.set('query', event.target.value);\n    setSearchParams(params);\n  };\n\n  const clearCenturies = () => {\n    const params = new URLSearchParams(searchParams);\n\n    params.delete('centuries');\n    setSearchParams(params);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={cn({ 'is-active': !searchParams.get('sex') })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={cn({ 'is-active': searchParams.get('sex') === 'm' })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={cn({ 'is-active': searchParams.get('sex') === 'f' })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={handleQuery}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuries.map(century => {\n              return (\n                <SearchLink\n                  key={century}\n                  data-cy=\"century\"\n                  className={cn('button mr-1', {\n                    'is-info': searchParams.getAll('centuries')\n                      .includes(String(century)),\n                  })}\n                  params={{\n                    centuries: getCenturyParams(String(century)),\n                  }}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <a\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              href=\"#/people\"\n              onClick={clearCenturies}\n            >\n              All\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <a\n          className=\"button is-link is-outlined is-fullwidth\"\n          href=\"#/people\"\n        >\n          Reset all filters\n        </a>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      className={\n        cn(\n          {\n            'has-text-danger': person.sex === 'f',\n          },\n        )\n      }\n      to={`${person.slug}`}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from '../components/SearchLink';\n\ntype OrderControlProps = {\n  sort: string;\n};\n\nexport const OrderControl = ({ sort }: OrderControlProps) => {\n  const [searchParams] = useSearchParams();\n\n  const handleOrder = () => {\n    const currentSort = searchParams.get('sort');\n    const currentOrder = searchParams.get('order');\n\n    let newSort: string | null = null;\n    let newOrder: string | null = null;\n\n    if (!currentSort) {\n      newSort = sort;\n    }\n\n    if (currentSort === sort && !currentOrder) {\n      newSort = sort;\n      newOrder = 'desc';\n    }\n\n    return { sort: newSort, order: newOrder };\n  };\n\n  return (\n    <SearchLink params={handleOrder()}>\n      <span className=\"icon\">\n        <i className={cn('fas fa-sort', {\n          'fa-sort-up': searchParams.get('sort') === sort\n            && !searchParams.get('order'),\n          'fa-sort-down': searchParams.get('sort') === sort\n            && !!searchParams.get('order'),\n        })}\n        />\n      </span>\n    </SearchLink>\n  );\n};\n","import cn from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\nimport { OrderControl } from '../utils/OrderControl';\n\ntype Props = {\n  people: Person[]\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug } = useParams();\n\n  function getPersonByName(name: string) {\n    return people.find((person) => person.name === name);\n  }\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <OrderControl sort=\"name\" />\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <OrderControl sort=\"sex\" />\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <OrderControl sort=\"born\" />\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <OrderControl sort=\"died\" />\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const {\n            motherName,\n            fatherName,\n            sex,\n            born,\n            died,\n          } = person;\n\n          const mother = motherName ? getPersonByName(motherName)\n            : undefined;\n          const father = fatherName ? getPersonByName(fatherName)\n            : undefined;\n\n          return (\n            <tr\n              data-cy=\"person\"\n              key={person.slug}\n              className={\n                cn(\n                  {\n                    'has-background-warning':\n                            slug === person.slug,\n                  },\n                )\n              }\n            >\n\n              <td>\n                <PersonLink person={person} />\n              </td>\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n\n              <td>\n                {(motherName\n                    && (mother ? <PersonLink person={mother} /> : motherName))\n                    || '-'}\n              </td>\n\n              <td>\n                {(fatherName\n                    && (father ? <PersonLink person={father} /> : fatherName))\n                    || '-'}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [peopleMessage, setPeopleMessage] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then((response) => {\n        setPeople(response);\n\n        if (response.length === 0) {\n          setPeopleMessage(true);\n        }\n      })\n\n      .catch(() => setError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const displayedPeople = () => {\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    let filteredPeople = [...people];\n    const centuries = searchParams.getAll('centuries') || [];\n    const gender = searchParams.get('sex') || '';\n    const query = searchParams.get('query') || '';\n\n    filteredPeople = centuries.length > 0\n      ? filteredPeople.filter(person => centuries\n        .includes((Math.ceil(Number(person.born) / 100)).toString()))\n      : filteredPeople;\n\n    filteredPeople = gender\n      ? filteredPeople.filter(person => person.sex === gender)\n      : filteredPeople;\n\n    filteredPeople = query\n      ? filteredPeople.filter(person => (\n        person.name.toLowerCase().includes(query.toLowerCase()))\n        || person.motherName?.toLocaleLowerCase()\n          .includes(query.toLocaleLowerCase())\n        || person.fatherName?.toLocaleLowerCase()\n          .includes(query.toLocaleLowerCase()))\n      : filteredPeople;\n\n    const sort = searchParams.get('sort');\n\n    if (sort) {\n      if (sort === 'born' || sort === 'died') {\n        filteredPeople.sort((a, b) => {\n          return a[sort] - b[sort];\n        });\n      }\n\n      if (sort === 'name' || sort === 'sex') {\n        filteredPeople.sort((a, b) => {\n          return a[sort].localeCompare(b[sort]);\n        });\n      }\n    }\n\n    const order = searchParams.get('order');\n\n    if (order) {\n      filteredPeople.reverse();\n    }\n\n    return filteredPeople;\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {people.length > 0\n              && <PeopleFilters />}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {error && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {peopleMessage && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!displayedPeople() && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {people.length > 0 && <PeopleTable people={displayedPeople()} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  HashRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"people\" element={<PeoplePage />}>\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n          <Route\n            path=\"home\"\n            element={(\n              <Navigate\n                to=\"/\"\n                replace\n              />\n            )}\n          />\n        </Route>\n      </Routes>\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { Root } from './Root';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}